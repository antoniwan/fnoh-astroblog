---
import BaseLayout from '../layouts/BaseLayout.astro';

import PostCard from '../components/ui/PostCard.astro';
import { SITE_TITLE, getCategoryDescription, getCategoryEmoji, getCategoryDisplayName, type CategoryKey } from '../consts';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
	const posts = await getCollection('writings');
	
	// Get unique categories from posts
	const categories = [...new Set(posts.map(post => post.data.category).filter(Boolean))] as CategoryKey[];
	
	return categories.map(category => ({
		params: { category },
		props: { category }
	}));
}

const { category } = Astro.props;
const posts = await getCollection('writings');
const categoryPosts = posts
	.filter(post => post.data.category === category)
	.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

const pageTitle = getCategoryDisplayName(category as CategoryKey);
const categoryDescription = getCategoryDescription(category as CategoryKey);
const categoryEmoji = getCategoryEmoji(category as CategoryKey);
---

<BaseLayout 
	title={`${pageTitle} - ${SITE_TITLE}`} 
	description={categoryDescription}
	type="website"
	section={pageTitle}
>
	<div class="container-full">
		<header class="category-header">
			<div class="category-info">
				<span class="category-emoji">{categoryEmoji}</span>
				<h1 class="category-title">{pageTitle}</h1>
			</div>
			<p class="category-description">{categoryDescription} <strong>{categoryPosts.length} writing{categoryPosts.length !== 1 ? 's' : ''}</strong>.</p>
		</header>

		<main class="category-content">
			{categoryPosts.length > 0 ? (
				<div class="posts-grid">
					{categoryPosts.map((post) => (
						<PostCard post={post} />
					))}
				</div>
			) : (
				<div class="no-posts">
					<p>No posts found in this category.</p>
					<a href="/" class="back-link">‚Üê Back to Home</a>
				</div>
			)}
		</main>
	</div>
</BaseLayout>

<style>
	.category-header {
		text-align: center;
		margin-bottom: var(--spacing-2xl);
		padding: var(--spacing-xl) 0;
		border-bottom: 1px solid var(--color-border);
	}

	.category-info {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: var(--spacing);
		margin-bottom: var(--spacing);
	}

	.category-emoji {
		font-size: var(--font-size-3xl);
	}

	.category-title {
		font-size: var(--font-size-3xl);
		font-weight: var(--font-weight-bold);
		margin: 0;
		color: var(--color-text);
	}

	.category-description {
		font-size: var(--font-size-lg);
		color: var(--color-text-light);
		max-width: 600px;
		margin: 0 auto var(--spacing);
		line-height: var(--line-height-relaxed);
	}

	.category-content {
		width: 100%;
	}

	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: var(--spacing-xl);
		width: 100%;
	}

	.no-posts {
		text-align: center;
		padding: var(--spacing-2xl);
	}

	.no-posts p {
		font-size: var(--font-size-lg);
		color: var(--color-text-light);
		margin-bottom: var(--spacing-lg);
	}

	.back-link {
		display: inline-block;
		color: var(--color-primary);
		text-decoration: none;
		font-weight: var(--font-weight-medium);
		transition: color 0.2s ease;
	}

	.back-link:hover {
		color: var(--color-primary-dark);
	}

	@media (max-width: 768px) {
		.category-header {
			padding: var(--spacing-lg) 0;
			margin-bottom: var(--spacing-xl);
		}

		.category-title {
			font-size: var(--font-size-2xl);
		}

		.category-description {
			font-size: var(--font-size-base);
		}

		.posts-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing-lg);
		}
	}
</style>
