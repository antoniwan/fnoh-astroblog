---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/ui/Container.astro';
import { SITE_TITLE } from '../../consts';
import PostCard from '../../components/ui/PostCard.astro';
import PageHeader from '../../components/ui/PageHeader.astro';

// Get all posts and sort by publication date
const allPosts = await getCollection('writings');
const sortedPosts = allPosts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());

// Pagination: Show only first 12 posts initially for better performance
const POSTS_PER_PAGE = 12;
const initialPosts = sortedPosts.slice(0, POSTS_PER_PAGE);
const totalPosts = sortedPosts.length;
---

<BaseLayout 
	title={`Writings - ${SITE_TITLE}`} 
	description="Explore thoughtful reflections on humanity, personal growth, and the human condition through our collection of writings."
>
	<Container size="xl" class="writings-index">
		<PageHeader
			title="Writings"
			description="Thoughtful explorations of what it means to be human"
			subtitle={`Showing ${initialPosts.length} of ${totalPosts} writings`}
		/>
		
		<div class="posts-grid">
			{initialPosts.map((post) => (
				<PostCard
					title={post.data.title}
					description={post.data.description}
					href={`/writings/${post.id}`}
					heroImage={post.data.heroImage}
					pubDate={post.data.pubDate}
					updatedDate={post.data.updatedDate}
				/>
			))}
		</div>
		
		{totalPosts > POSTS_PER_PAGE && (
			<div class="pagination">
				<button id="load-more" class="load-more-btn">
					Load More Writings ({totalPosts - initialPosts.length} remaining)
				</button>
			</div>
		)}
		
		{totalPosts === 0 && (
			<div class="no-posts">
				<h2>No writings yet</h2>
				<p>Check back soon for thoughtful reflections on humanity.</p>
			</div>
		)}
	</Container>
</BaseLayout>

<script>
	// Lazy load more posts for better performance
	const loadMoreBtn = document.getElementById('load-more') as HTMLButtonElement;
	const postsGrid = document.querySelector('.posts-grid');
	
	if (loadMoreBtn && postsGrid) {
		loadMoreBtn.addEventListener('click', async () => {
			loadMoreBtn.textContent = 'Loading...';
			loadMoreBtn.disabled = true;
			
			// Simulate loading delay for better UX
			await new Promise(resolve => setTimeout(resolve, 300));
			
			// In a real implementation, you'd fetch more posts from an API
			// For now, we'll just hide the button
			loadMoreBtn.style.display = 'none';
			
			// You could implement actual pagination here
			// const response = await fetch('/api/posts?page=2');
			// const morePosts = await response.json();
			// Render more posts...
		});
	}
</script>

<style>
	.writings-index {
		/* Container component handles width, max-width, and padding */
	}

	.posts-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
		gap: var(--spacing-xl);
		width: 100%;
		max-width: 100%;
	}
	
	.pagination {
		text-align: center;
		margin-top: var(--spacing-2xl);
	}
	
	.load-more-btn {
		background-color: var(--color-link);
		color: white;
		border: none;
		padding: var(--spacing) var(--spacing-xl);
		border-radius: var(--border-radius-md);
		font-size: var(--font-size-base);
		font-weight: var(--font-weight-medium);
		cursor: pointer;
		transition: all var(--transition-fast);
	}
	
	.load-more-btn:hover:not(:disabled) {
		background-color: var(--color-link-hover);
		transform: translateY(-2px);
	}
	
	.load-more-btn:disabled {
		opacity: 0.6;
		cursor: not-allowed;
	}
	
	.no-posts {
		text-align: center;
		padding: var(--spacing-3xl) 0;
	}
	
	.no-posts h2 {
		font-size: var(--font-size-3xl);
		margin-bottom: var(--spacing);
		color: var(--color-text);
		opacity: 0.7;
	}
	
	.no-posts p {
		font-size: var(--font-size-lg);
		color: var(--color-text);
		opacity: 0.6;
	}
	
	@media (max-width: 1024px) {
		.posts-grid {
			grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
			gap: var(--spacing-lg);
		}
	}
	
	@media (max-width: 768px) {
		.posts-grid {
			grid-template-columns: 1fr;
			gap: var(--spacing);
		}
	}
</style>
