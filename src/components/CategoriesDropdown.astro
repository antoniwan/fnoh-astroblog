---
import { ChevronDown } from "lucide-astro";
import { getCollection } from "astro:content";
import {
  getCategoriesWithPosts,
  getCategoryDisplayName,
  getCategoryUrl,
} from "../utils/categories";

// Get categories that have posts
const categoriesWithPosts = await getCategoriesWithPosts();
---

<div class="relative" data-dropdown>
  <button
    class="flex items-center gap-2 bg-transparent border-none text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 font-medium py-2 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
    aria-expanded="false"
    aria-haspopup="true"
  >
    Categories
    <ChevronDown class="w-4 h-4 transition-transform duration-200" />
  </button>

  <div
    class="absolute top-full left-0 mt-2 min-w-[200px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl shadow-xl opacity-0 invisible -translate-y-2 transition-all duration-200 z-50 py-2"
    role="menu"
  >
    {
      categoriesWithPosts.map((category) => (
        <a
          href={getCategoryUrl(category.slug)}
          class="block w-full text-left px-4 py-3 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 text-sm font-medium"
          role="menuitem"
        >
          {getCategoryDisplayName(category.slug, categoriesWithPosts)}
        </a>
      ))
    }
  </div>
</div>

<script>
  // Dropdown functionality
  (function () {
    const dropdowns = document.querySelectorAll("[data-dropdown]");

    dropdowns.forEach((dropdown) => {
      const trigger = dropdown.querySelector("button");
      const menu = dropdown.querySelector("div[role='menu']");
      const icon = trigger?.querySelector("svg");

      if (!trigger || !menu) return;

      let isOpen = false;

      function toggleDropdown() {
        isOpen = !isOpen;

        if (trigger) {
          trigger.setAttribute("aria-expanded", isOpen.toString());
        }

        if (isOpen && menu) {
          menu.classList.remove("opacity-0", "invisible", "-translate-y-2");
          menu.classList.add("opacity-100", "visible", "translate-y-0");
          icon?.classList.add("rotate-180");
        } else if (menu) {
          menu.classList.add("opacity-0", "invisible", "-translate-y-2");
          menu.classList.remove("opacity-100", "visible", "translate-y-0");
          icon?.classList.remove("rotate-180");
        }

        // Close other dropdowns
        dropdowns.forEach((otherDropdown) => {
          if (otherDropdown !== dropdown) {
            const otherTrigger = otherDropdown.querySelector("button");
            const otherMenu = otherDropdown.querySelector("div[role='menu']");
            const otherIcon = otherTrigger?.querySelector("svg");

            if (otherTrigger) {
              otherTrigger.setAttribute("aria-expanded", "false");
            }
            if (otherMenu) {
              otherMenu.classList.add(
                "opacity-0",
                "invisible",
                "-translate-y-2",
              );
              otherMenu.classList.remove(
                "opacity-100",
                "visible",
                "translate-y-0",
              );
            }
            if (otherIcon) {
              otherIcon.classList.remove("rotate-180");
            }
          }
        });
      }

      function closeDropdown() {
        isOpen = false;
        if (trigger) {
          trigger.setAttribute("aria-expanded", "false");
        }
        if (menu) {
          menu.classList.add("opacity-0", "invisible", "-translate-y-2");
          menu.classList.remove("opacity-100", "visible", "translate-y-0");
        }
        icon?.classList.remove("rotate-180");
      }

      // Toggle on click
      trigger.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleDropdown();
      });

      // Close when clicking outside
      document.addEventListener("click", (e) => {
        if (!dropdown.contains(e.target as Element)) {
          closeDropdown();
        }
      });

      // Close on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && isOpen) {
          closeDropdown();
        }
      });

      // Close on hover out (for better UX)
      dropdown.addEventListener("mouseleave", () => {
        if (isOpen) {
          closeDropdown();
        }
      });
    });
  })();
</script>
