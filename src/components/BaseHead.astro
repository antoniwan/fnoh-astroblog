---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.css";
import { SITE_TITLE } from "../consts";
import StructuredData from "./StructuredData.astro";

interface Props {
  title: string;
  description: string;
  image?: string;
  type?: "website" | "article" | "organization";
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  image = "/images/default.avif",
  type = "website",
  publishedTime,
  modifiedTime,
  author,
  section,
  tags = [],
} = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Theme initialization script -->
<script is:inline>
  // Initialize theme immediately to prevent flash of unstyled content
  (function () {
    const theme = localStorage.getItem("theme") || "light";
    const htmlElement = document.documentElement;

    // Set the data-theme attribute
    htmlElement.setAttribute("data-theme", theme);

    // Apply theme colors immediately to prevent flash
    if (theme === "dark") {
      htmlElement.style.backgroundColor = "#0a0a0a";
      htmlElement.style.color = "#f1f5f9";
    } else {
      htmlElement.style.backgroundColor = "#fafafa";
      htmlElement.style.color = "#1a1a1a";
    }
  })();
</script>

<!-- Resource Hints for Performance -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="dns-prefetch" href="https://fonts.googleapis.com" />
<link rel="dns-prefetch" href="https://fonts.gstatic.com" />

<!-- Preload critical resources -->
<link rel="preload" href="/favicon.svg" as="image" type="image/svg+xml" />
<link rel="preload" href="/_astro/global.css" as="style" />

<!-- Typography: Inter for body text, Merriweather for headings (loaded via CSS variables) -->
<!-- Fonts are now loaded through our CSS variables for better performance -->

<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Field Notes on Humanity" />
<meta
  name="robots"
  content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
/>
<meta name="language" content="en-US" />
<meta name="revisit-after" content="7 days" />
<meta name="theme-color" content="#1e3a8a" />
<meta name="color-scheme" content="light dark" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={title} />
<meta property="og:site_name" content={SITE_TITLE} />
<meta property="og:locale" content="en_US" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />
<meta property="twitter:image:alt" content={title} />
<meta property="twitter:site" content="@fieldnotesonhumanity" />
<meta property="twitter:creator" content="@fieldnotesonhumanity" />

<!-- Article-specific meta tags -->
{
  type === "article" && publishedTime && (
    <>
      <meta property="article:published_time" content={publishedTime} />
      <meta
        property="article:modified_time"
        content={modifiedTime || publishedTime}
      />
      {author && <meta property="article:author" content={author} />}
      {section && <meta property="article:section" content={section} />}
      {tags.length > 0 &&
        tags.map((tag) => <meta property="article:tag" content={tag} />)}
    </>
  )
}

<!-- Structured Data -->
<StructuredData
  type={type}
  title={title}
  description={description}
  url={canonicalURL.toString()}
  image={new URL(image, Astro.url).toString()}
  publishedTime={publishedTime}
  modifiedTime={modifiedTime}
  author={author}
  section={section}
  tags={tags}
/>
