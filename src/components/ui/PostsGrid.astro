---
import type { CollectionEntry } from "astro:content";
import PostCard from "./PostCard.astro";

interface Props {
  posts: CollectionEntry<"writings">[];
  class?: string;
  showLoadMore?: boolean;
  totalPosts?: number;
  initialPostsCount?: number;
}

const {
  posts,
  class: className = "",
  showLoadMore = false,
  totalPosts = 0,
  initialPostsCount = 0,
} = Astro.props;

const hasMorePosts = showLoadMore && totalPosts > initialPostsCount;
const remainingPosts = totalPosts - initialPostsCount;
---

<div class:list={[
  "grid grid-cols-[repeat(auto-fill,minmax(350px,1fr))] gap-xl w-full max-w-full items-start justify-items-stretch m-0 p-0 box-border min-w-0 lg:grid-cols-[repeat(auto-fit,minmax(300px,1fr))] lg:gap-lg md:grid-cols-[repeat(auto-fit,minmax(280px,1fr))] md:gap-lg md:px-md sm:grid-cols-1 sm:gap-base sm:px-sm xs:grid-cols-1 xs:gap-sm xs:px-xs",
  className
]}>
  {posts.map((post) => <PostCard post={post} class="w-full max-w-full m-0 p-0 box-border min-w-0" />)}
</div>

{
  showLoadMore && hasMorePosts && (
    <div class="text-center mt-8 py-xl">
      <button id="load-more" class="inline-block bg-primary-800 text-white border-none py-md px-xl rounded-lg text-base font-medium cursor-pointer transition-all duration-normal shadow-sm hover:bg-primary-900 hover:-translate-y-0.5 hover:shadow-md disabled:bg-text-lighter disabled:cursor-not-allowed disabled:transform-none disabled:shadow-sm">
        Load More Writings ({remainingPosts} remaining)
      </button>
    </div>
  )
}

<script>
  // Lazy load more posts for better performance
  const loadMoreBtn = document.getElementById("load-more") as HTMLButtonElement;
  const postsGrid = document.querySelector(".posts-grid");

  if (loadMoreBtn && postsGrid) {
    loadMoreBtn.addEventListener("click", async () => {
      loadMoreBtn.textContent = "Loading...";
      loadMoreBtn.disabled = true;

      // Simulate loading delay for better UX
      await new Promise((resolve) => setTimeout(resolve, 300));

      // In a real implementation, you'd fetch more posts from an API
      // For now, we'll just hide the button
      loadMoreBtn.style.display = "none";

      // You could implement actual pagination here
      // const response = await fetch('/api/posts?page=2');
      // const morePosts = await response.json();
      // Render more posts...
    });
  }
</script>
