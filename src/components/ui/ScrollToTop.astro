---
import { ArrowUp } from "lucide-astro";

interface Props {
  class?: string;
  threshold?: number;
  position?: "bottom-right" | "bottom-left" | "bottom-center";
}

const {
  class: className = "",
  threshold = 300,
  position = "bottom-right",
} = Astro.props;
---

<button
  id="scroll-to-top"
  class:list={["scroll-to-top", `position-${position}`, className]}
  aria-label="Scroll to top"
>
  <ArrowUp />
</button>

<script define:vars={{ threshold }}>
  // Simple scroll to top functionality
  const scrollToTopBtn = document.getElementById("scroll-to-top");
  if (!scrollToTopBtn) return;

  // Show/hide button based on scroll position
  function handleScroll() {
    const shouldShow = window.pageYOffset > threshold;
    scrollToTopBtn.classList.toggle("visible", shouldShow);
  }

  // Scroll to top when clicked
  scrollToTopBtn.addEventListener("click", () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  });

  // Listen for scroll events
  window.addEventListener("scroll", handleScroll, { passive: true });

  // Initial check
  handleScroll();
</script>

<style>
  .scroll-to-top {
    position: fixed;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: white;
    border: 2px solid var(--color-border-light);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transform: translateY(1rem);
    transition: all var(--transition-normal);
    z-index: 9999;
    box-shadow: var(--shadow-lg);
    overflow: hidden;
  }

  .scroll-to-top::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      var(--color-primary),
      var(--color-accent)
    );
    opacity: 0;
    transition: opacity var(--transition-fast);
    z-index: 0;
  }

  .scroll-to-top.position-bottom-right {
    bottom: 2rem;
    right: 2rem;
  }

  .scroll-to-top.position-bottom-left {
    bottom: 2rem;
    left: 2rem;
  }

  .scroll-to-top.position-bottom-center {
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(1rem);
  }

  .scroll-to-top.visible {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .scroll-to-top.position-bottom-center.visible {
    transform: translateX(-50%) translateY(0);
  }

  .scroll-to-top:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-0.25rem);
    box-shadow: var(--shadow-xl);
    border-color: var(--color-primary);
  }

  .scroll-to-top:hover::before {
    opacity: 1;
  }

  .scroll-to-top.position-bottom-center:hover {
    transform: translateX(-50%) translateY(-0.25rem);
  }

  .scroll-to-top:focus {
    outline: 2px solid var(--color-focus);
    outline-offset: 2px;
    box-shadow: 0 0 0 4px var(--color-focus-ring);
  }

  .scroll-to-top svg {
    width: 1.25rem;
    height: 1.25rem;
    position: relative;
    z-index: 1;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .scroll-to-top {
      width: 2.5rem;
      height: 2.5rem;
    }

    .scroll-to-top.position-bottom-right,
    .scroll-to-top.position-bottom-left,
    .scroll-to-top.position-bottom-center {
      bottom: 1rem;
    }

    .scroll-to-top svg {
      width: 1rem;
      height: 1rem;
    }
  }

  /* Dark theme adjustments */
  html[data-theme="dark"] .scroll-to-top {
    background-color: var(--color-primary);
    border-color: var(--color-border-dark);
    box-shadow: var(--shadow-lg);
  }

  html[data-theme="dark"] .scroll-to-top:hover {
    background-color: var(--color-primary-dark);
    box-shadow: var(--shadow-xl);
  }
</style>
