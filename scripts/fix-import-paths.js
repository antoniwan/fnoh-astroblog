#!/usr/bin/env node

/**
 * Fix Import Paths Script
 * 
 * This script fixes the incorrect import paths generated by the migration script.
 * The issue is duplicate "images" in the import paths.
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

const CONTENT_DIR = path.join(projectRoot, 'src/content/writings');

/**
 * Fix import paths in a content file
 */
async function fixImportPaths(filePath) {
    const content = await fs.readFile(filePath, 'utf-8');
    let updatedContent = content;
    let hasChanges = false;
    
    // Fix duplicate "images" in import paths
    const duplicateImagesRegex = /from '\.\.\/\.\.\/assets\/images\/images\//g;
    if (duplicateImagesRegex.test(updatedContent)) {
        updatedContent = updatedContent.replace(duplicateImagesRegex, "from '../../assets/images/");
        hasChanges = true;
        console.log(`  ‚úÖ Fixed duplicate images path in ${path.basename(filePath)}`);
    }
    
    // Fix any remaining incorrect paths
    const incorrectPathRegex = /from '\.\.\/\.\.\/assets\/images\/([^']+)'/g;
    if (incorrectPathRegex.test(updatedContent)) {
        updatedContent = updatedContent.replace(incorrectPathRegex, "from '../../assets/images/$1'");
        hasChanges = true;
    }
    
    if (hasChanges) {
        await fs.writeFile(filePath, updatedContent, 'utf-8');
        return true;
    }
    
    return false;
}

/**
 * Main function to fix all content files
 */
async function fixAllImportPaths() {
    console.log('üîß Fixing import paths in content files...\n');
    
    try {
        const contentFiles = await fs.readdir(CONTENT_DIR);
        const markdownFiles = contentFiles.filter(file => file.endsWith('.md') || file.endsWith('.mdx'));
        
        let fixedCount = 0;
        for (const file of markdownFiles) {
            const filePath = path.join(CONTENT_DIR, file);
            if (await fixImportPaths(filePath)) {
                fixedCount++;
            }
        }
        
        console.log(`\n‚úÖ Fixed import paths in ${fixedCount} content files`);
        console.log('üéâ All import paths have been corrected!');
        
    } catch (error) {
        console.error('‚ùå Failed to fix import paths:', error);
        process.exit(1);
    }
}

// Run if script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    fixAllImportPaths();
}

export { fixAllImportPaths, fixImportPaths };
